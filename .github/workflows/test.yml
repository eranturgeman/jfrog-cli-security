name: JFrog CLI Security Tests

on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [ labeled ]

# Ensures that only the latest commit is running for each PR at a time.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.ref }}
  cancel-in-progress: true

# Environment variables shared across all jobs.
env:
  GOPROXY: direct
  GO_COMMON_ARGS: "-v github.com/jfrog/jfrog-cli-security --race --timeout 30m  --jfrog.url=${{ secrets.PLATFORM_URL }} --jfrog.adminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --test.containerRegistry=${{ secrets.CONTAINER_REGISTRY }} --ci.runId=${{ matrix.os }}-sec-test"
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  CI: true
  JFROG_CLI_LOG_LEVEL: DEBUG

jobs:
  Pretest:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Remove 'safe to test' label
        uses: actions-ecosystem/action-remove-labels@v1
        if: ${{ github.event_name != 'push' }}
        with:
          labels: "safe to test"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Go with cache
        uses: jfrog/.github/actions/install-go-with-cache@main

      - name: Run Go vet
        run: go vet -v ./...
  
  Unit_Tests:
    name: Unit Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover -coverprofile=cover-unit-tests --test.unit
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: unit-tests-code-coverage
          path: cover-unit-tests

  Audit_Command_Integration_Tests:
    name: Audit Command Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover --coverprofile=cover-audit-tests --test.audit
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: audit-tests-code-coverage
          path: cover-audit-tests

  Artifactory_Integration_Tests:
    name: Artifactory Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover --coverprofile=cover-artifactory-tests --test.artifactory
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: artifactory-tests-code-coverage
          path: cover-artifactory-tests

  Xray_Commands_Integration_Tests:
    name: Xray Commands Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover --coverprofile=cover-xray-tests --test.xray
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: xray-tests-code-coverage
          path: cover-xray-tests

  Xsc_Integration_Tests:
    name: XSC Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover --coverprofile=cover-xsc-tests --test.xsc
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: xsc-tests-code-coverage
          path: cover-xsc-tests

  Other_Scan_Commands_Integration_Tests:
    name: Other Scan Commands Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test --test.scan
        if: ${{ matrix.os != 'ubuntu' }}
      - name: Run security tests (with Docker Scan)
        run: go test -cover --coverprofile=cover-scan-tests --test.scan --test.dockerScan
        if: ${{ matrix.os == 'ubuntu' }}

      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: scan-tests-code-coverage
          path: cover-scan-tests

  Other_Commands_Integration_Tests:
    name: Other Commands Integration Tests (${{ matrix.os }}) 
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    steps:
      # Prepare the environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and Setup Dependencies
        uses: ./.github/actions/install-and-setup

      # Test and generate code coverage
      - name: Run tests
        run: go test -cover --coverprofile=cover-other-tests --test.enrich --test.git
    
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu'
        with:
          name: other-tests-code-coverage
          path: cover-other-tests
 
  Code_Coverage:
    name: Generate Code Coverage Report
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [Unit_Tests, Audit_Command_Integration_Tests, Artifactory_Integration_Tests, Xray_Commands_Integration_Tests, Xsc_Integration_Tests, Other_Scan_Commands_Integration_Tests, Other_Commands_Integration_Tests]
    permissions:
      contents:      read
      actions:       read  # to download code coverage results from jobs
      pull-requests: write # write permission needed to comment on PR
    steps:
      - name: Generate Unit Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: unit-tests-code-coverage
          coverage-file-name: cover-unit-tests
      - name: Generate Audit Command Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: audit-tests-code-coverage
          coverage-file-name: cover-audit-tests
      - name: Generate Artifactory Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: artifactory-tests-code-coverage
          coverage-file-name: cover-artifactory-tests
      - name: Generate Xray Commands Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: xray-tests-code-coverage
          coverage-file-name: cover-xray-tests
      - name: Generate XSC Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: xsc-tests-code-coverage
          coverage-file-name: cover-xsc-tests
      - name: Generate Other Scan Commands Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: scan-tests-code-coverage
          coverage-file-name: cover-scan-tests
      - name: Generate Other Commands Integration Tests Code Coverage Report
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: other-tests-code-coverage
          coverage-file-name: cover-other-tests